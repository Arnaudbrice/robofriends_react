{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Footer.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","_ref","children","React","createElement","className","style","overflow","maxHeight","position","Card","email","id","name","username","src","concat","alt","CardList","robots","Fragment","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Footer","year","ErrorBoundary","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","hasError","_inherits","_createClass","value","error","errorInfo","console","log","Component","App","searchField","_this2","fetch","then","response","json","data","setState","catch","err","_this3","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","Date","getFullYear","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yNAWeA,EATA,SAAHC,GAAmB,IAAdC,EAAQD,EAARC,SAEf,OACEC,IAAAC,cAAA,OAAKC,UAAU,2CAA2CC,MAAO,CAAEC,SAAU,SAAUC,UAAU,SAASC,SAAS,aAChHP,ICUQQ,EAbF,SAAHT,GAAsC,IAAhCU,EAAKV,EAALU,MAAOC,EAAEX,EAAFW,GAAIC,EAAIZ,EAAJY,KAAcZ,EAARa,SAE/B,OACEX,IAAAC,cAAA,OAAKC,UAAU,mDACbF,IAAAC,cAAA,OAAKW,IAAG,wBAAAC,OAA0BJ,GAAMK,IAAI,UAC5Cd,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKS,GACLV,IAAAC,cAAA,KAAGC,UAAU,QAAQM,MC6BdO,EApBE,SAAHjB,GAAmB,IAAbkB,EAAMlB,EAANkB,OAKlB,OACEhB,IAAAC,cAAAD,IAAAiB,SAAA,KACGD,EAAOE,IAAI,SAAAC,GAAI,OACdnB,IAAAC,cAACM,EAAI,CACHa,IAAKD,EAAKV,GACVA,GAAIU,EAAKV,GACTD,MAAOW,EAAKX,MACZE,KAAMS,EAAKT,WCpBNW,EATG,SAAHvB,GAAwB,IAAlBwB,EAAYxB,EAAZwB,aACnB,OACEtB,IAAAC,cAAAD,IAAAiB,SAAA,KACEjB,IAAAC,cAAA,SAAOsB,KAAK,SAASb,KAAK,SAASD,GAAG,YAAYe,YAAY,gBAAgBC,SAAUH,MCQ/EI,EAXA,SAAH5B,GAAe,IAAV6B,EAAI7B,EAAJ6B,KACf,OACE3B,IAAAC,cAAAD,IAAAiB,SAAA,KACGjB,IAAAC,cAAA,cACDD,IAAAC,cAAA,SAAG,cAAWD,IAAAC,cAAA,YAAO0B,GAAY,2BC6BxBC,QAhCI,SAAAC,GAEnB,SAAAD,EAAYE,GAAO,IAAAC,EAKhB,OALgBC,YAAAC,KAAAL,IACjBG,EAAAG,YAAAD,KAAAE,YAAAP,GAAAQ,KAAAH,KAAMH,KAEDO,MAAQ,CACVC,UAAS,GACXP,EAMF,OAbkBQ,YAAAX,EAAAC,GAQlBW,YAAAZ,EAAA,EAAAR,IAAA,oBAAAqB,MAAA,SAOiBC,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,KACpB,CAAAvB,IAAA,SAAAqB,MAAA,WAMG,OAAIR,KAAKI,MAAMC,SACLtC,IAAAC,cAAA,UAAI,+BAELgC,KAAKH,MAAM/B,YAErB,EAAAqB,IAAA,2BAAAqB,MAAA,SAnB6BC,GAE9B,MAAO,CAAEJ,UAAU,OACpBV,EAbkB,CAASkB,cC4GbC,SAjGN,SAAAlB,GAKP,SAAAkB,IAAc,IAAAhB,EAWV,OAXUC,YAAAC,KAAAc,IACZhB,EAAAG,YAAAD,KAAAE,YAAAY,GAAAX,KAAAH,QAOKI,MAAQ,CACXrB,OAAQ,GACRgC,YAAa,IACbjB,EA8EH,OA9FMQ,YAAAQ,EAAAlB,GA4BPW,YAAAO,EAAA,EAAA3B,IAAA,oBAAAqB,MAAA,WAIoB,IAAAQ,EAAAhB,KAElBiB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAAEvC,OAAQsC,MACrCE,MAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,OAG9B,CAAArC,IAAA,SAAAqB,MAAA,WAKS,IAAAiB,EAAAzB,KAAA0B,EACyB1B,KAAKI,MAA7BrB,EAAM2C,EAAN3C,OAAQgC,EAAWW,EAAXX,YAQVY,EAAiB5C,EAAO6C,OAAO,SAAAC,GACnC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAAShB,EAAYe,iBAIvD,OAAK/C,EAAOiD,OAQRjE,IAAAC,cAAAD,IAAAiB,SAAA,KAEEjB,IAAAC,cAAA,MAAIC,UAAU,oDAAmD,eAKjEF,IAAAC,cAACoB,EAAS,CAACnB,UAAU,UAAUoB,aAAc,SAAA4C,GAC3CR,EAAKH,SAAS,CAAEP,YAAakB,EAAMC,OAAO1B,WAK5CzC,IAAAC,cAACJ,EAAM,KACLG,IAAAC,cAAC2B,EAAa,KACZ5B,IAAAC,cAACc,EAAQ,CAACC,OAAQ4C,MAOtB5D,IAAAC,cAACyB,EAAM,CAACC,MAAM,IAAIyC,MAAOC,iBA5B3BrE,IAAAC,cAAAD,IAAAiB,SAAA,KACEjB,IAAAC,cAAA,UAAI,oBAgCX8C,EA9FM,CAASD,cCFHwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAvB,KAAAsB,EAAAE,KAAA,UAAqBxB,KAAK,SAAArD,GAAiD,IAA9C8E,EAAM9E,EAAN8E,OAAQC,EAAM/E,EAAN+E,OAAQC,EAAMhF,EAANgF,OAAQC,EAAMjF,EAANiF,OAAQC,EAAOlF,EAAPkF,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCGDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrF,IAAAC,cAACD,IAAMsF,WAAU,KAEftF,IAAAC,cAAC8C,EAAG,QAMRuB","file":"static/js/main.dd9f8376.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = ({children}) => {\n\n  return (\n    <div className=\"scrollContainer  mt3   ba b--dotted bw1 \" style={{ overflow: 'scroll', maxHeight:\"1000px\",position:\"relative\"}}>\n      {children}\n    </div>\n  );\n\n};\nexport default Scroll;\n\n\n","import React from 'react';\n// destructuring of the props and use it a parameter\n\nconst Card = ({ email, id, name, username }) => {\n\n  return (\n    <div className=\" card tc bg-light-green br3  grow bw2 shadow-5 \">\n      <img src={`https://robohash.org/${id}`} alt=\"robot\" />\n      <div>\n        <h2>{name}</h2>\n        <p className=\"gray\">{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n\n\n\n\n","import React from \"react\";\nimport Card from \"./Card\";\n\n/* props:{\n  \"robots\": [\n    \"{email: \\\"johndoe@example.com\\\", id: 1, name: \\\"John D…}\",\n    \"{email: \\\"janesmith@example.com\\\", id: 2, name: \\\"Jane…}\",\n    \"{email: \\\"bobjohnson@example.com\\\", id: 3, name: \\\"Bob…}\",\n    \"{email: \\\"alicebrown@example.com\\\", id: 4, name: \\\"Ali…}\",\n    \"{email: \\\"mikewilson@example.com\\\", id: 5, name: \\\"Mik…}\",\n    \"{email: \\\"sarahdavis@example.com\\\", id: 6, name: \\\"Sar…}\",\n    \"{email: \\\"tomthompson@example.com\\\", id: 7, name: \\\"To…}\",\n    \"{email: \\\"emilyanderson@example.com\\\", id: 8, name: \\\"…}\",\n    \"{email: \\\"davidlee@example.com\\\", id: 9, name: \\\"David…}\",\n    \"{email: \\\"oliviamartinez@example.com\\\", id: 10, name:…}\"\n  ]\n} */\n\n\nconst CardList = ({ robots }) => {\n  // create for each element of the robots array a Card component (mapping data to components)\n//   if (true) {\n//   throw new Error(\"Nooooo!\");\n// }\n  return (\n    <>\n      {robots.map(user => (\n        <Card\n          key={user.id}\n          id={user.id}\n          email={user.email}\n          name={user.name}\n        />\n      ))}\n\n    </>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange}) => {\n  return (\n    <>\n      <input type=\"search\" name=\"search\" id=\"searching\" placeholder=\"search robots\" onChange={searchChange} />\n\n    </>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Footer = ({year}) => {\n  return (\n    <>\n       <footer>\n      <p>copyright@ <span>{year}</span> by Arnaud Habenicht</p>\n    </footer>\n\n    </>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nimport \"tachyons\";\nclass ErrorBoundary extends Component {\n\nconstructor(props) {\n  super(props)\n\n  this.state = {\n     hasError:false\n  }\n}\n\nstatic getDerivedStateFromError(error) {\n  // Update state so the next render will show the fallback UI.\n  return { hasError: true };\n}\n\ncomponentDidCatch(error, errorInfo) {\n  // You can also log the error to an error reporting service\n  console.log(error, errorInfo);\n}\n\n\n\n  render() {\n\n    if (this.state.hasError) {\n      return (<h1>Ooop! Something went wrong.</h1>);\n    }\n      return this.props.children;\n\n  }\n}\n\nexport default ErrorBoundary;\n\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport Scroll from '../components/Scroll';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Footer from '../components/Footer';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport \"tachyons\";\nimport \"./App.css\";\n\n/**\n * Main application component that displays a list of robots and a search box to filter them.\n * @extends Component\n */\nclass App extends Component {\n  /**\n   * Creates an instance of App component.\n   * Initializes the component state.\n   */\n  constructor() {\n    super();\n\n    /**\n     * @type {object}\n     * @property {Array} robots - The list of robots to display.\n     * @property {string} searchField - The current value of the search input field.\n     */\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  /**\n   * Event handler for changes in the search input field.\n   * Updates the component state with the new searchField value.\n   * @param {object} event - The event object containing the input field value.\n   */\n  // onSearchChange = event => {\n  //   this.setState({ searchField: event.target.value });\n  // };\n\n  /**\n   * @description, Called immediately after a component is mounted ( rendered).\n   * Setting state here will trigger re-rendering.\n   */\n  componentDidMount() {\n    // fetching api and updating the state of the robot array\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json()) //parse via json\n      .then(data => this.setState({ robots: data }))\n      .catch(err => console.log(err));\n  }\n\n  /**\n   * Renders the App component.\n   * Filters the robots based on the current search field value and displays the CardList.\n   * @returns {JSX.Element} The JSX representation of the component.\n   */\n  render() {\n    const { robots, searchField } = this.state;\n\n\n    /**\n     * Filters the robots based on the current search field value.\n     * @type {Array}\n     */\n    //check if every string or substring  I enter in the searchbox is substring of any robot name\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    // if (robots.length === 0) { //this one can be also used\n\n    if (!robots.length) {\n      return (\n        <>\n          <h1>Loading....</h1>\n        </>\n      );\n    } else {\n      return (\n        <>\n          {/* The header */}\n          <h1 className=\"mt0 mb3 tc bg-light-green pa3 dark-gray w-100 f2\">\n            Robofriends\n          </h1>\n\n          {/* The search box with the seachChange props */}\n          <SearchBox className=\" mt3 tc\" searchChange={event => {\n            this.setState({ searchField: event.target.value });\n          }} />\n\n          {/* Scroll can use CardList as Children */}\n          {/* The list of cards */}\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n\n\n            </ErrorBoundary>\n\n          </Scroll>\n\n          <Footer year={new Date().getFullYear()} />\n\n        </>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n\nimport App from './containers/App';\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n\n    <App/>\n\n  </React.StrictMode>\n);\n// passing props to the child component\n\nreportWebVitals();\n"],"sourceRoot":""}